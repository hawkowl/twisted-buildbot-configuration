#! /usr/bin/python

# This configuration file is described in $BUILDBOT/docs/config.xhtml

# This is used to run the Twisted Buildbot at
# <http://buildbot.twistedmatrix.com/>. Passwords and other secret
# information are loaded from a neighboring file called 'private.py'.

# Enable TCP keepalives.  The build master is terrible at noticing
# disconnected slaves.  Also it's terrible at letting me enable tcp
# keepalives.
from twisted.spread.pb import PBServerFactory
_parent = PBServerFactory.protocol
class KeepaliveBroker(_parent):
    def makeConnection(self, transport):
        transport.setTcpKeepAlive(True)
        return _parent.makeConnection(self, transport)
PBServerFactory.protocol = KeepaliveBroker

# We now return to your regularly scheduled program.
import sys
sys.path.append('/srv/bb-master/BuildBot/support-master')

import os.path

from buildbot.changes.pb import PBChangeSource
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers import forcesched
from buildbot.steps.source import SVN, Bzr
from buildbot.process.factory import s
from buildbot.status import html, words, client, mail
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.steps.shell import ShellCommand
from buildbot.locks import MasterLock, SlaveLock
from buildbot.buildslave import BuildSlave

import private # holds passwords
reload(private) # make it possible to change the contents without a restart

from twisted_factories import (
    TwistedDocumentationBuildFactory, FullTwistedBuildFactory,
    TwistedSphinxBuildFactory,
    PyFlakesBuildFactory, GoodTwistedBuildFactory,
    TwistedReactorsBuildFactory, Win32RemovePYCs,
    LinuxPyOpenSSLBuildFactory,
    OSXPyOpenSSLBuildFactory, Win32PyOpenSSLBuildFactory,
    TwistedEasyInstallFactory, TwistedPyPyBuildFactory,
    PyPyTranslationFactory,
    TwistedScheduler, TwistedBdistMsiFactory,
    PyOpenSSLGCoverageFactory, TwistedGCoverageFactory,
    TwistedCoveragePyFactory, CPythonBuildFactory,
    TwistedBenchmarksFactory)

from twisted_status import TenBoxesPerBuilder

from buildbot.status.web.waterfall import WaterfallStatusResource

BuildmasterConfig = c = {}

# I set really=False when testing this configuration at home
really = True
usePBChangeSource = True

# Maximum number of builds to execute on a slave at a time.  Slaves
# not listed here have no limit.
slave_max_builds = {
    'bot-codelounge': 2,
    'tomprince-socrates-winxp-1': 1,
    'jv-solaris11-x86': 2,
    'canonical-ubuntu-12.04': 2,
    }


c['slaves'] = []
alwaysNotify = ['itamar@itamarst.org', 'tom.prince@ualberta.net']
for bot in private.bot_info.keys():
    password, notifyOnMissing = private.bot_info[bot]
    if alwaysNotify not in notifyOnMissing:
        notifyOnMissing.extend(alwaysNotify)
    c['slaves'].append(BuildSlave(
            bot, password, slave_max_builds.get(bot, None),
            notifyOnMissing, 2400))

c['change_source'] = []

# the Twisted buildbot currently uses the contrib/svn_buildbot.py script.
# This makes a TCP connection to the ChangeMaster service to push Changes
# into the build master. The script is invoked by
# /svn/Twisted/hooks/post-commit, so it will only be run for things inside
# the Twisted repository. However, the standard SVN practice is to put the
# actual trunk in a subdirectory named "trunk/" (to leave room for
# "branches/" and "tags/"). We want to only pay attention to the trunk, so
# we use "trunk" as a prefix for the ChangeSource. This also strips off that
# prefix, so that the Builders all see sensible pathnames (which means they
# can do things like ignore the sandbox properly).

source = PBChangeSource(prefix="trunk/")
c['change_source'].append(source)


## configure the builders

# for build-on-branch
baseURL = "svn://svn.twistedmatrix.com/svn/Twisted/"
defaultBranch = "trunk"
source_update = s(SVN, baseURL=baseURL, defaultBranch=defaultBranch,
                  mode="update")
source_copy = s(SVN, baseURL=baseURL, defaultBranch=defaultBranch,
                mode="copy")
source_export = s(SVN, baseURL=baseURL, defaultBranch=defaultBranch,
                  mode="export")

def _bzr_source(mode, url='svn://svn.twistedmatrix.com/svn/Twisted/'):
    return Bzr(
        baseURL=url,
        defaultBranch='trunk',

        # Unfortunately we can't share a repository between different
        # builders.
        forceSharedRepo=True,

        # This is a bit crap, but I don't think it will hurt us, and it
        # fixes the critical failure that happens as long as we're still
        # using an svn trigger (svn and bzr revnos don't match up).
        alwaysUseLatest=True,

        # Sigh.  Sometimes builds fuck up the checkout.  I'd really rather
        # have mode="revert" but there's no such thing.
        mode=mode,
        )


bzr_update = [
    _bzr_source("update", "http://svn.twistedmatrix.com/bzr/Twisted/"),
    ShellCommand(command=["bzr", "revert"]),
    # Don't use --unknown here because it will delete the buildbot
    # source tracking file.  That's too bad.  It'd be nice to pass
    # --unknown here.
    ShellCommand(command=["bzr", "clean-tree", "--force", "--ignored", "--detritus"]),
    ]

builders = []

oneCPULock = SlaveLock('cpu-1', maxCount=1)
twoCPULock = SlaveLock('cpu-2', maxCount=2)

botCube = {
    'slavenames': ['bot-cube'],
    'locks': [oneCPULock]}

b1 = botCube.copy()

# Several Windows VMs are on a single physical host, and they behave
# very poorly when allowed to run concurrently.  Serialize them.
baelnornSerializationLock = MasterLock("baelnorn-hardware")

builders.append({
        'slavenames': ['bot-glyph-1'],
        'name': 'documentation',
        'builddir': 'documentation',
        'factory': TwistedDocumentationBuildFactory(bzr_update),
        'category': 'supported'})

bot_exarkun_1 = {
    'slavenames': ['bot-exarkun-1'],
    'locks': [twoCPULock.access('counting')]}

bot = bot_exarkun_1.copy()
bot.update({
        'name': 'sphinx-documentation',
        'builddir': 'sphinx-documentation',
        'factory': TwistedSphinxBuildFactory(bzr_update),
        'category': 'unsupported'})
builders.append(bot)
del bot

builders.append({
        'name': 'pyflakes',
        'slavenames': [],
        'builddir': 'pyflakes',
        'factory': PyFlakesBuildFactory(bzr_update),
        'category': 'unsupported'})

builders.append({
        'name': 'twisted-gcoverage',
        'builddir': 'twisted-gcoverage',
        'slavenames': ['bot-therve-1'],
        # Use svn here because this builder typically doesn't build
        # branches, only trunk, and with svn we can use mode="copy"
        # which protects us more from stale data being kept around.
        'factory': TwistedGCoverageFactory(python=["python"], source=source_copy),
        'category': 'unsupported'})

builders.append({
        'name': 'twisted-coverage.py',
        'builddir': 'twisted-coverage.py',
        'slavenames': ['bot-therve-1'],
        # Same logic as above -might- apply here, but there are no
        # -known- issues with stale data messing up results.  It might
        # be nice to be consistent with gcoverage here though just so
        # revision numbers line up.
        'factory': TwistedCoveragePyFactory(python=["python"], source=bzr_update),
        'category': 'unsupported'})

builders.append({
    'name': 'debian-easy-py2.6-epoll',
    'slavenames': ['bot-idnar-debian'],
    'builddir': 'easy2.6debian',
    'factory': TwistedEasyInstallFactory(bzr_update,
                                         python=["python2.6", "-Wall"],
                                         uncleanWarnings=False,
                                         easy_install="easy_install-2.6"),
    'category': 'supported'})


builders.append({
    'slavenames': ['bot-glyph-1'],
    'name': 'lucid64-py2.6-select',
    'builddir': 'lucid64-python2.6-select',
    'factory': FullTwistedBuildFactory(bzr_update,
                                       python=["python2.6", "-Wall"]),
    'category': 'supported'})


builders.append({
    'slavenames': ['bot-glyph-1'],
    'name': 'lucid32-py2.6-select',
    'builddir': 'lucid32-python2.6-select',
    'factory': FullTwistedBuildFactory(bzr_update,
                                       python=["python2.6", "-Wall"]),
    'category': 'supported'})


builders.append({
        'slavenames': ['bot-glyph-1'],
        'name': 'lucid32-cpy2.7maint-translator',
        'builddir': 'lucid32-python2.7maint-translator',
        'factory': CPythonBuildFactory(
            "2.7", "python2.7", [
                "pycrypto-2.1.0",
                "gmpy-1.14",
                "pyOpenSSL-0.10",
                "zope.interface-3.6.1",
                "pyasn1-0.0.11a",
                "testtools-0.9.11",
                "subunit-0.0.5",
                ]),
        'category': 'unsupported',
        'unschedule': None})


builders.append({
        'slavenames': ['bot-glyph-1'],
        'name': 'lucid32-py2.7maint',
        'builddir': 'lucid32-py2.7maint',
        'factory': FullTwistedBuildFactory(bzr_update,
                                           python=["../python", "-Wall"]),
        'category': 'supported'})


python27W3 = {
    'slavenames': ['bot-thijs', 'canonical-ubuntu-12.04'],
    'name': 'python-3k-warnings',
    'builddir': 'python-3k-warnings',
    'factory': FullTwistedBuildFactory(bzr_update,
                                       python=["python2.7", "-3"]),
    'category': 'unsupported',
    'unschedule': True}
builders.append(python27W3)
del python27W3

builders.append({
        'slavenames': ['bot-glyph-1'],
        'name': 'py-select-gc',
        'builddir': 'py-select-gc',
        'factory': GoodTwistedBuildFactory(bzr_update,
                                           python="python",
                                           uncleanWarnings=False,
                                           forceGarbageCollection=True),
        'category': 'supported'})


# This builder simulates an environment which is missing some
# extension modules Twisted uses but which are not supposed to cause
# test suite failures if they are missing.
bot = bot_exarkun_1.copy()
bot.update({
        'name': 'py-without-modules',
        'builddir': 'py-without-modules',
        'factory': GoodTwistedBuildFactory(
            bzr_update, python="python2.6", uncleanWarnings=False,
            extraTrialArguments={
                'trialArgs': [
                    '--without-module', 'OpenSSL',
                    '--without-module', 'Crypto',
                    ]}),
        'category': 'supported'})
builders.append(bot)
del bot



winxp1 = {
    'slavenames': [],
    }

winxp2 = {
    'slavenames': [],
    }

winxp4 = {
    'slavenames': [],
    }


builders.append({
          'slavenames': ['tomprince-socrates-winxp-1'],
          'name': "winxp32-py2.6",
          'builddir': "winxp32-py2.6-select",
          'factory': TwistedReactorsBuildFactory(bzr_update,
                                                 RemovePYCs=Win32RemovePYCs,
                                                 python="c:\\python26\\python.exe",
                                                 # compileOpts2=["-c","mingw32"],
                                                 reactors=["select", "iocp"],
                                                 uncleanWarnings=True),
          'category': 'supported'})


builders.append({
        'name': 'winxp32-py2.7',
        'builddir': 'winxp32-py2.7',
        'slavenames': ['tomprince-socrates-winxp-1'],
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               RemovePYCs=Win32RemovePYCs,
                                               python="c:\\python27\python.exe",
                                               reactors=["select", "iocp"],
                                               uncleanWarnings=True),
        'category': 'supported'})


builders.append({
        'name': 'windows7-32-py2.7',
        'builddir': 'windows7-64-py2.7',
        'slavenames': ['bot-cylon-1'],
        'factory': TwistedReactorsBuildFactory(
            bzr_update, RemovePYCs=Win32RemovePYCs,
            python="C:\\Python27\python.exe",
            reactors=["select", "qt"],
            uncleanWarnings=True),
        'category': 'unsupported'})


builders.append({
        'name': 'windows7-64-py2.7',
        'builddir': 'windows7-64-py2.7-select',
        'slavenames': ['bot-glyph-6'],
        'factory': TwistedReactorsBuildFactory(
            bzr_update, RemovePYCs=Win32RemovePYCs,
            python="C:\\Python27\\python.exe",
            reactors=["select", "iocp"],
            uncleanWarnings=True),
        'locks': [baelnornSerializationLock.access("exclusive")],
        'category': 'supported'})
                                              

builders.append({
          'name': "winxp32-py2.6-msi",
          'slavenames': ['tomprince-socrates-winxp-1'],
          'builddir': "winxp32-py2.6-msi",
          'factory': TwistedBdistMsiFactory(bzr_update,
                                            uncleanWarnings=True,
                                            arch="win32",
                                            pyVersion="2.6"),
          'category': 'supported'})

builders.append({
        'name': "winxp32-py2.7-msi",
        'builddir': "winxp32-py2.7-msi",
        'slavenames': ['tomprince-socrates-winxp-1'],
        'factory': TwistedBdistMsiFactory(bzr_update,
                                          uncleanWarnings=True,
                                          arch="win32",
                                          pyVersion="2.7"),
        'category': 'supported'})


builders.append({
        'name': "windows7-64-py2.7-msi",
        'builddir': "windows7-64-py2.7-msi",
        'slavenames': ['bot-glyph-6'],
        'factory': TwistedBdistMsiFactory(bzr_update,
                                          uncleanWarnings=True,
                                          arch="win-amd64",
                                          pyVersion="2.7"),
        'locks': [baelnornSerializationLock.access("exclusive")],
        'category': 'supported'})


builders.append({
        'name': 'rhel6-32bit-py2.6',
        'slavenames': ['bot-flumotion-1'],
        'builddir': 'rhel6-32-py2.6',
        'factory': TwistedReactorsBuildFactory(
            bzr_update, python="python", reactors=["poll", "epoll", "glib2"]),
        'category': 'supported'})


builders.append({
        'name': 'fedora11-64bit-py2.7',
        'slavenames': ['bot-flumotion-2'],
        'builddir': 'fedora11-64bit-py2.7',
        'factory': TwistedReactorsBuildFactory(
            source_copy, python="python", reactors=["poll", "epoll", "glib2"]),
        'category': 'supported'})


builders.append({
          'name': 'lucid64-py2.6-wx',
          'slavenames': ['bot-glyph-1'],
          'builddir': 'ubuntu-py2.6-wx',
          'factory': TwistedReactorsBuildFactory(bzr_update,
                                                 python="python",
                                                 reactors=["wx"],
                                                 uncleanWarnings=True),
          'category': 'unsupported'})

builders.append({
          'name': 'lucid64-py2.6-poll',
          'slavenames': ['bot-glyph-1'],
          'builddir': 'ubuntu64-py2.6-poll',
          'factory': TwistedReactorsBuildFactory(bzr_update,
                                                 python="python2.6",
                                                 reactors=["poll"],
                                                 uncleanWarnings=False),
          'category': 'supported'})

builders.append({
          'name': 'lucid64-py2.6-epoll',
          'slavenames': ['bot-glyph-1'],
          'builddir': 'ubuntu64-py2.6-epoll',
          'factory': TwistedReactorsBuildFactory(bzr_update,
                                                 python="python2.6",
                                                 reactors=["epoll"],
                                                 uncleanWarnings=False),
          'category': 'supported'})


builders.append({
        'slavenames': [],
        'name': 'lucid64-cpy3.2maint-translator',
        'builddir': 'lucid64-cpy3.2maint-translator',
        'factory': CPythonBuildFactory(
            "branches/release32-maint", "python3.2", [
                ]),
        'category': 'unsupported',
        'unschedule': None})


bot = bot_exarkun_1.copy()
bot.update({
        'name': 'osx10.6-py2.6-select',
        'builddir': 'osx10.6-py2.6-select',
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               python="python2.6",
                                               reactors=["select"],
                                               uncleanWarnings=False),
        'category': 'supported'})
builders.append(bot)
del bot

builders.append({
        'name': 'openbsd-current-sparc64',
        'slavenames': ['bot-soyt-1'],
        'builddir': 'openbsd-current-sparc64',
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               python="python",
                                               reactors=["select"],
                                               uncleanWarnings=False),
        'category': 'unsupported'})


builders.append({
        'name': 'openbsd-current-i386',
        'slavenames': ['bot-soyt-2'],
        'builddir': 'openbsd-current-i386',
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               python="python",
                                               reactors=["select"],
                                               uncleanWarnings=False),
        'category': 'unsupported'})


builders.append({
        'name': 'openbsd-current-amd64',
        'slavenames': ['bot-soyt-3'],
        'builddir': 'openbsd-current-amd64',
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               python="python",
                                               reactors=["select"],
                                               uncleanWarnings=False),
        'category': 'unsupported'})


builders.append({
        'name': 'freebsd-8.1-amd64',
        'slavenames': ['bot-lewq-1'],
        'builddir': 'freebsd-8.1-amd64',
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               python="python",
                                               reactors=["select"],
                                               uncleanWarnings=False),
        'category': 'unsupported'})

        
builders.append({
        'name': 'freebsd-8.2-i386',
        'slavenames': ['bot-tobias-1'],
        'builddir': 'freebsd-8.2-i386',
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               python="python",
                                               reactors=["select", "kqueue"],
                                               uncleanWarnings=False),
        'category': 'supported'})
        

builders.append({
        'name': 'solaris11-x86-py2.6',
        'slavenames': ['jv-solaris11-x86'],
        'builddir': 'solaris11-x86-py2.6',
        'factory': TwistedReactorsBuildFactory(bzr_update,
                                               python="/usr/bin/python",
                                               reactors=["select", "poll"],
                                               uncleanWarnings=True),
        'category': 'unsupported'})

						


# The next two builders work together.  The first translates PyPy and
# runs once a week.  The second uses the result of the first to test
# Twisted against pypy, and is scheduled in the usual way.  As such,
# they must be on the same slave and share a builddir.  Since buildbot
# doesn't let two builders have the same builddir in the master
# configuration, the slaves have to be configured to cause this to
# happen, probably by with symlinks. -exarkun
pypy_packages = [
                # "pycrypto-2.1.0",  -- 2012-06-23 not supported on pypy
                # "gmpy-1.14",  -- 2012-06-23 not supported on pypy
                # "pyOpenSSL-0.11",  -- 2012-06-24 twisted.internet.test.test_endpoints.ServerStringTests.test_ssl hangs
                "zope.interface-3.6.1",
                "pyasn1-0.0.11a",
                "testtools-0.9.11",
                "subunit-0.0.5",
                ]
builders.append({
    'name': 'lucid32-pypy',
    'slavenames': ['bot-glyph-1'],
    'builddir': 'lucid32-pypy',
    'factory': TwistedPyPyBuildFactory(bzr_update),
    'category': 'unsupported'})
builders.append({
    'name': 'lucid32-pypy-translator',
    'slavenames': ['bot-glyph-1'],
    'builddir': 'lucid32-pypy-translator',
    'factory': PyPyTranslationFactory(["-Ojit"], [], pypy_packages),
    'unschedule': None,
    'category': 'unsupported'})


bot = bot_exarkun_1.copy()
bot.update({
        'name': 'osx10.6-py2.6-benchmarks',
        'builddir': 'osx10.6-py2.6-benchmarks',
        'factory': TwistedBenchmarksFactory("python2.6", source_update),
        'unschedule': None,
        'locks': [twoCPULock.access('exclusive')],
        'category': 'benchmark'})
builders.append(bot)
del bot

bot = bot_exarkun_1.copy()
bot.update({
        'name': 'osx10.6-pypy1.5-benchmarks',
        'builddir': 'osx10.6-pypy1.5-benchmarks',
        'factory': TwistedBenchmarksFactory("pypy", source_update),
        'unschedule': None,
        'locks': [twoCPULock.access('exclusive')],
        'category': 'benchmark'})
builders.append(bot)
del bot


# PyOpenSSL builders.  These are merged into builders later on so that
# they are excluded from certain parts of the configuration (because
# they're not really part of Twisted). -exarkun
pyOpenSSLBuilders = []
pyOpenSSL = botCube.copy()
pyOpenSSL.update({
    'name': 'ubuntu32-pyopenssl',
    'builddir': 'ubuntu32-pyopenssl',
    'factory': LinuxPyOpenSSLBuildFactory(
        versions=["2.4", "2.5", "2.6"],
        source=True,
        platform="linux-i686"),
    'category': 'pyopenssl'})
pyOpenSSLBuilders.append(pyOpenSSL)
del pyOpenSSL

pyOpenSSLBuilders.append({
        'name': 'lucid64-py3.2-pyopenssl',
        'slavenames': ['bot-glyph-1'],
        'builddir': 'lucid64-py3.2-pyopenssl',
        'factory': LinuxPyOpenSSLBuildFactory(
            versions=["3.2"],
            source=False,
            platform="linux-x86_64",
            useTrial=False),
        'category': 'pyopenssl'})

pyOpenSSLBuilders.append({
        'name': 'linux32-py2.6-ssl1.0.0a',
        'slavenames': ['bot-exarkun-2'],
        'builddir': 'linux32-py2.6-ssl1.0.0a',
        'factory': LinuxPyOpenSSLBuildFactory(
            versions=["2.6"],
            source=False,
            platform="linux-i686"),
        'category': 'pyopenssl'})

pyOpenSSLBuilders.append({
    'name': 'debian64-pyopenssl',
    'slavenames': ['bot-idnar-debian64'],
    'builddir': 'debian64-pyopenssl',
    'factory': LinuxPyOpenSSLBuildFactory(
        versions=["2.4"],
        source=False,
        platform="linux-x86_64"),
    'category': 'pyopenssl'})

pyOpenSSLBuilders.append({
        'name': 'centos5.7-pyopenssl',
        'slavenames': ['bot-centos5.7'],
        'builddir': 'centos5.7-pyopenssl',
        'factory': LinuxPyOpenSSLBuildFactory(
            versions=["2.4"],
            source=False,
            platform="linux-i686"),
        'category': 'pyopenssl'})

pyOpenSSLBuilders.append({
        'name': 'centos6-pyopenssl',
        'slavenames': ['bot-centos6'],
        'builddir': 'centos6-pyopenssl',
        'factory': LinuxPyOpenSSLBuildFactory(
            versions=["2.6"],
            source=False,
            platform="linux-x86_64"),
        'category': 'pyopenssl'})

bot = bot_exarkun_1.copy()
bot.update({
        'name': 'osx10.6-py2.6-pyopenssl',
        'builddir': 'osx10.6-py2.6-pyopenssl',
        'factory': OSXPyOpenSSLBuildFactory(
            versions=["2.6"],
            osxVersion="10.6",
            source=False),
        'category': 'pyopenssl'})
pyOpenSSLBuilders.append(bot)
del bot

pyOpenSSL = winxp1.copy()
pyOpenSSL.update({
    'name': "winxp32-py2.4-pyopenssl",
    'builddir': "WXP32-py2.4-pyopenssl",
    'factory': Win32PyOpenSSLBuildFactory("winxp32", "msvc", "2.4", r"C:\OpenSSL-VS.NET2003"),
    'category': 'pyopenssl'})
pyOpenSSLBuilders.append(pyOpenSSL)
del pyOpenSSL

pyOpenSSL = winxp2.copy()
pyOpenSSL.update({
    'name': "winxp32-py2.5-pyopenssl",
    'builddir': "WXP32-py2.5-pyopenssl",
    'factory': Win32PyOpenSSLBuildFactory("winxp32", "msvc", "2.5", r"C:\OpenSSL-VS.NET2003"),
    'category': 'pyopenssl'})
pyOpenSSLBuilders.append(pyOpenSSL)
del pyOpenSSL

pyOpenSSL = winxp4.copy()
pyOpenSSL.update({
    'name': "winxp32-py2.6-pyopenssl",
    'builddir': "winxp32-py2.6-pyopenssl",
    'factory': Win32PyOpenSSLBuildFactory("winxp32", "msvc", "2.6", r"C:\OpenSSL-VS2008"),
    'category': 'pyopenssl'})
pyOpenSSLBuilders.append(pyOpenSSL)

pyOpenSSL = winxp4.copy()
pyOpenSSL.update({
    'name': "winxp32-py2.7-pyopenssl",
    'builddir': "winxp32-py2.7-pyopenssl",
    'factory': Win32PyOpenSSLBuildFactory("winxp32", "msvc", "2.7", r"C:\OpenSSL-VS2008"),
    'category': 'pyopenssl'})
pyOpenSSLBuilders.append(pyOpenSSL)

pyOpenSSL = winxp1.copy()
pyOpenSSL.update({
    'name': "winxp32-py3.2-pyopenssl",
    'builddir': "winxp32-py3.2-pyopenssl",
    'factory': Win32PyOpenSSLBuildFactory("winxp32", "msvc", "3.2", r"C:\OpenSSL-VS2008"),
    'category': 'pyopenssl'})
pyOpenSSLBuilders.append(pyOpenSSL)

pyOpenSSLBuilders.append({
        'name': 'pyopenssl-gcoverage',
        'slavenames': ['bot-cube'],
        'builddir': 'pyopenssl-gcoverage',
        'factory': PyOpenSSLGCoverageFactory(["python2.5"]),
        'category': 'pyopenssl'})

c['builders'] = builders


# Now set up the schedulers. We do this after setting up c['builders']
# so we can auto-generate the correct configuration from the builder
# definitions.
c['schedulers'] = [
    TwistedScheduler(
        name="all", branch=None,
        builderNames=[b['name'] for b in builders if 'unschedule' not in b],
        treeStableTimer=None),
    Nightly(
        name="WeeklyInterpreter",
        builderNames=[
            b['name'] for b in builders if '-translator' in b['name']],
        hour=4, minute=0, dayOfWeek=1, branch=None),
    Nightly(
        name="Benchmarks",
        builderNames=[
            b['name'] for b in builders if b['category'] == 'benchmark'],
        hour=6, minute=3, branch=None, onlyIfChanged=True),
    ]

c['schedulers'].extend([
    forcesched.ForceScheduler(
        name='force-supported',
        repository=forcesched.FixedParameter(name='repository', default='svn://svn.twistedmatrix.com/svn/Twisted/'),
        branch=forcesched.StringParameter(name='branch', default=''),
        project=forcesched.FixedParameter(name="project", default=""),
        properties=[],
        builderNames=[ b['name'] for b in builders if b['category'] == 'supported' ]),
    forcesched.ForceScheduler(
        name='force-unsupported',
        repository=forcesched.FixedParameter(name='repository', default='svn://svn.twistedmatrix.com/svn/Twisted/'),
        branch=forcesched.StringParameter(name='branch', default=''),
        project=forcesched.FixedParameter(name="project", default=""),
        properties=[],
        builderNames=[ b['name'] for b in builders if b['category'] == 'unsupported' and 'schedule' not in b ]),
    forcesched.ForceScheduler(
        name='force-pyopenssl',
        repository=forcesched.FixedParameter(name='repository', default='http://bazaar.launchpad.net/~exarkun/pyopenssl/'),
        branch=forcesched.StringParameter(name='branch', default='trunk'),
        project=forcesched.FixedParameter(name="project", default="pyopenssl"),
        properties=[],
        builderNames=[ b['name'] for b in pyOpenSSLBuilders]),
    forcesched.ForceScheduler(
        name='force-pypy-translate',
        repository=forcesched.FixedParameter(name='repository', default='https://bitbucket.org/pypy/pypy'),
        branch=forcesched.StringParameter(name='branch', default=''),
        project=forcesched.FixedParameter(name="project", default="pypy"),
        properties=[],
        builderNames=['lucid32-pypy-translator']),
    forcesched.ForceScheduler(
        name='force-py2.7-translate',
        repository=forcesched.FixedParameter(name='repository', default='http://hg.python.org/cpython'),
        branch=forcesched.StringParameter(name='branch', default=''),
        project=forcesched.FixedParameter(name="project", default="cpy2.7"),
        properties=[],
        builderNames=['lucid32-cpy2.7maint-translator']),
	])

# Now merge PyOpenSSL builders
builders.extend(pyOpenSSLBuilders)
del pyOpenSSLBuilders

# buildbot doesn't know about the unschedule key
for builder in builders:
    if 'unschedule' in builder:
        del builder['unschedule']

# configure other status things

c['slavePortnum'] = 9987
c['status'] = []
c['status'].append(words.IRC(host="irc.freenode.net",
                             nick='buildbot',
                             password=private.irc_password,
                             channels=["twisted"]))

users = [ ('twisted', 'matrix') ]
authz = Authz(
    auth=BasicAuth(users),
    default_action='auth',
    gracefulShutdown=False,
    cleanShutdown=False,
    showUsersPage=False,
    )
status = html.WebStatus(
    distrib_port=os.path.expanduser('~/webstatus.twistd-web-pb'),
    authz=authz)
status.putChild("boxes-supported", TenBoxesPerBuilder(categories=['supported']))
status.putChild("boxes-all", TenBoxesPerBuilder(categories=['supported', 'unsupported']))
status.putChild("boxes-pyopenssl", TenBoxesPerBuilder(categories=['pyopenssl']))
status.putChild("supported", WaterfallStatusResource(categories=['supported']))
status.putChild("waterfall", WaterfallStatusResource(categories=['supported', 'unsupported']))
status.putChild("waterfall-pyopenssl", WaterfallStatusResource(categories=['pyopenssl']))
c['status'].append(status)
del status

supportedList = list(
    builder['name']
    for builder
    in builders
    if builder['category'] == 'supported')
supportedListFile = file('public_html/supported-builders.txt', 'w')
supportedListFile.write('\n'.join(supportedList) + '\n')
supportedListFile.close()

del supportedList, supportedListFile


c['debugPassword'] = private.debugPassword
#c['interlocks'] = [("do-deb", ["full-2.2"], ["debuild"])]
if hasattr(private, "manhole"):
    from buildbot import manhole
    c['manhole'] = manhole.PasswordManhole(*private.manhole)
c['status'].append(client.PBListener(9936))
m = mail.MailNotifier(fromaddr="buildbot@twistedmatrix.com",
                      builders=["quick", "debian-py2.3-select"],
                      sendToInterestedUsers=True,
                      extraRecipients=["warner@lothar.com"],
                      mode="problem",
                     )
c['status'].append(m)
c['projectName'] = "Twisted"
c['projectURL'] = "http://twistedmatrix.com/"
c['buildbotURL'] = "http://buildbot.twistedmatrix.com/"

c['buildCacheSize'] = 500
c['mergeRequests'] = lambda builder, req1, req2: False
c['multiMaster'] = True # avoid single-master checks for unscheduled builders
